import { useState } from 'react';
import { Check } from 'lucide-react';
import ProgressBar from 'react-bootstrap/ProgressBar';
import './nutrition.scss';

export default function SuggestedFood() {
    const [foods, setFoods] = useState([
        {
            icon: 'üç≥',
            name: 'Tr·ª©ng g√† chi√™n',
            details: '94g ‚Ä¢ 90 cal',
            macros: ['6.5g', '1g', '7.1g'],
            colors: ['danger', 'info', 'warning'],
            checked: true,
            meal: 's√°ng'
        },
        {
            icon: 'üçÖ',
            name: 'Qu·∫£ c√† chua',
            details: '90g ‚Ä¢ 16 cal',
            macros: ['0.7g', '3.5g', '0g'],
            colors: ['danger', 'info', 'warning'],
            checked: true,
            meal: 'tr∆∞a'
        },
        {
            icon: 'üçû',
            name: 'B√°nh m√¨ Sandwich l√°t',
            details: '30g ‚Ä¢ 144 cal',
            macros: ['5g', '25.9g', '2.5g'],
            colors: ['danger', 'info', 'warning'],
            checked: false,
            meal: 'ƒÉn v·∫∑t'
        },
        {
            icon: 'ü•¨',
            name: 'Rau x√† l√°ch',
            details: '80g ‚Ä¢ 12 cal',
            macros: ['1.4g', '2.9g', '0.2g'],
            colors: ['danger', 'info', 'warning'],
            checked: false,
            meal: 't·ªëi'
        }
    ]);


    const toggleChecked = (index) => {
        const updatedFoods = [...foods];
        updatedFoods[index].checked = !updatedFoods[index].checked;
        setFoods(updatedFoods);
    };

    const calculateTotals = () => {
        let totalCalo = 0;
        let totalProtein = 0;
        let totalCarbs = 0;
        let totalFat = 0;

        const caloriesByMeal = {
            s√°ng: 0,
            tr∆∞a: 0,
            t·ªëi: 0,
            'ƒÉn v·∫∑t': 0
        };

        foods.forEach(food => {
            if (food.checked) {
                const [protein, carbs, fat] = food.macros.map(m => parseFloat(m.replace('g', '')));
                const cal = parseFloat(food.details.split('‚Ä¢')[1].replace('cal', '').trim());

                totalProtein += protein;
                totalCarbs += carbs;
                totalFat += fat;
                totalCalo += cal;

                if (food.meal in caloriesByMeal) {
                    caloriesByMeal[food.meal] += cal;
                }
            }
        });

        return {
            totalCalo,
            totalProtein,
            totalCarbs,
            totalFat,
            caloriesByMeal
        };
    };


    const targetCalo = 2117; // M·ª•c ti√™u calo
    const macroRatios = {
        protein: 0.2, // 20%
        carbs: 0.5,   // 50%
        fat: 0.3      // 30%
    };

    const targetProtein = Math.round((targetCalo * macroRatios.protein) / 4);
    const targetCarbs = Math.round((targetCalo * macroRatios.carbs) / 4);
    const targetFat = Math.round((targetCalo * macroRatios.fat) / 9);
    const { caloriesByMeal } = calculateTotals();

    const renderMeal = (mealLabel) => (
        <div className="mb-4">
            <div className="d-flex justify-content-between align-items-center mb-3">
                <h5>Bu·ªïi {mealLabel}</h5>
                <small className="text-white">{caloriesByMeal[mealLabel] || 0} cal</small>
            </div>

            {foods.filter(f => f.meal === mealLabel).map((item, idx) => (
                <div className="d-flex gap-3 p-3 mb-3 gradient rounded align-items-center" key={idx}>
                    <div className="bg-light rounded d-flex align-items-center justify-content-center" style={{ width: 48, height: 48, fontSize: 24 }}>
                        {item.icon}
                    </div>
                    <div className="flex-grow-1">
                        <h6 className="mb-0">{item.name}</h6>
                        <small className="text-white">{item.details}</small>
                        <div className="d-flex gap-3 mt-1 text-white">
                            {item.macros.map((macro, i) => (
                                <span key={i} className="d-flex align-items-center gap-1">
                                    <span
                                        className={`d-inline-block rounded-circle bg-${item.colors[i]}`}
                                        style={{ width: 8, height: 8 }}
                                    ></span>
                                    {macro}
                                </span>
                            ))}
                        </div>
                    </div>
                    <div
                        className={`d-flex align-items-center justify-content-center rounded-circle ${item.checked ? 'bg-success' : 'bg-dark'}`}
                        style={{ width: 24, height: 24, cursor: 'pointer' }}
                        onClick={() => toggleChecked(foods.indexOf(item))}
                    >
                        {item.checked ? <Check size={16} color="white" /> : <span className="bg-light rounded-circle" style={{ width: 8, height: 8 }}></span>}
                    </div>
                </div>
            ))}
        </div>
    );

    // T√≠nh t·ªïng
    const totalMacros = targetProtein + targetCarbs + targetFat;

    const proteinPercent = (targetProtein / totalMacros) * 100;
    const carbsPercent = (targetCarbs / totalMacros) * 100;
    const fatPercent = (targetFat / totalMacros) * 100;

    // T√≠nh ƒë·ªô d√†i cung tr√≤n t∆∞∆°ng ·ª©ng (t·ªïng chu vi ~ 283)
    const proteinArc = (proteinPercent / 100) * 283;
    const carbsArc = (carbsPercent / 100) * 283;
    const fatArc = (fatPercent / 100) * 283;

    // G√≥c b·∫Øt ƒë·∫ßu m·ªói cung (d√πng stroke-dashoffset)
    const carbsOffset = proteinArc;
    const fatOffset = proteinArc + carbsArc;

    return (
        <div className="min-vh-100 bg-white text-dark p-3">
            <div className="d-flex justify-content-between align-items-center mb-3 position-relative" style={{ height: "400px", overflow: "hidden" }}>
                {/* Background Image */}
                <img
                    src="https://images.unsplash.com/photo-1555939594-58d7cb561ad1"
                    alt="Food background"
                    className="position-absolute top-0 start-0 w-100 h-100 object-cover"
                    style={{ objectFit: "cover", zIndex: 1 }}
                />
                {/* Overlay Gradient */}
                <div
                    className="position-absolute top-0 start-0 w-100 h-100"
                    style={{
                        background: "linear-gradient(to bottom, rgba(0,0,0,0.2), rgba(0,0,0,0.4), rgba(0,0,0,0.9))",
                        zIndex: 2,
                    }}
                />

                {/* Content */}
                <div className="position-relative text-white px-4 pb-4" style={{ zIndex: 3, maxWidth: "700px" }}>
                    {/* Filter Tags */}
                    <div className="d-flex flex-wrap gap-2 mb-4">
                        <span className="px-3 py-2 bg-white bg-opacity-25 backdrop-blur rounded-pill text-sm">
                            √çt tinh b·ªôt - TƒÉng c∆°
                        </span>
                        <span className="px-3 py-2 bg-white bg-opacity-25 backdrop-blur rounded-pill text-sm">4 b·ªØa/ng√†y</span>
                    </div>

                    {/* Title */}
                    <h1 className="fs-4 fw-bold mb-3">
                        Meal plan chu·∫©n gym: TƒÉng c∆°, Gi·∫£m m·ª°, S·ªëng kh·ªèe
                    </h1>

                    {/* Description */}
                    <p className="text-white fw-semibold small" style={{ lineHeight: 1.6 }}>
                        Meal plan chu·∫©n gym: TƒÉng c∆°, Gi·∫£m m·ª°, S·ªëng kh·ªèe l√† ch·∫ø ƒë·ªô ƒÉn u·ªëng ƒë∆∞·ª£c thi·∫øt k·∫ø khoa h·ªçc, gi√∫p ng∆∞·ªùi t·∫≠p
                        luy·ªán c·∫£i thi·ªán v√≥c d√°ng hi·ªáu qu·∫£ v√† duy tr√¨ s·ª©c kh·ªèe l√¢u d√†i. Th·ª±c ƒë∆°n c√¢n b·∫±ng gi·ªØa ba nh√≥m ch·∫•t ch√≠nh:
                        ƒë·∫°m (protein) gi√∫p x√¢y d·ª±ng c∆° b·∫Øp, tinh b·ªôt t·ªët (carb ph·ª©c) cung c·∫•p nƒÉng l∆∞·ª£ng b·ªÅn v·ªØng, v√† ch·∫•t b√©o l√†nh
                        m·∫°nh h·ªó tr·ª£ hormone v√† h·∫•p thu dinh d∆∞·ª°ng. Meal plan n√†y c√≤n ch√∫ tr·ªçng ƒë·∫øn th·ª±c ph·∫©m gi√†u ch·∫•t x∆°, vitamin
                        v√† kho√°ng ch·∫•t ƒë·ªÉ tƒÉng c∆∞·ªùng trao ƒë·ªïi ch·∫•t v√† h·ªó tr·ª£ gi·∫£m m·ª°. C√°c b·ªØa ƒÉn ƒë∆∞·ª£c chia nh·ªè, ƒÉn ƒë√∫ng gi·ªù ƒë·ªÉ ki·ªÉm
                        so√°t insulin v√† duy tr√¨ nƒÉng l∆∞·ª£ng ·ªïn ƒë·ªãnh su·ªët ng√†y d√†i. ƒê√¢y l√† l·ª±a ch·ªçn l√Ω t∆∞·ªüng cho ng∆∞·ªùi mu·ªën tƒÉng c∆°,
                        gi·∫£m m·ª° m√† v·∫´n ƒë·∫£m b·∫£o l·ªëi s·ªëng l√†nh m·∫°nh v√† b·ªÅn v·ªØng.
                    </p>
                </div>
            </div>


            <div className="d-flex flex-wrap align-items-center justify-content-between my-3">
                <div className="d-flex flex-wrap align-items-center gap-4">
                    {/* Bi·ªÉu ƒë·ªì tr√≤n */}
                    <div className="position-relative" style={{ width: "50px", height: "50px" }}>
                        <svg className="w-120 h-100" viewBox="0 0 100 100" style={{ transform: "rotate(-90deg)" }}>
                            <circle cx="50" cy="50" r="45" stroke="#e5e7eb" strokeWidth="8" fill="none" />

                            {/* Protein */}
                            <circle
                                cx="50"
                                cy="50"
                                r="45"
                                stroke="#dc2626"
                                strokeWidth="8"
                                fill="none"
                                strokeDasharray={`${proteinArc} 283`}
                                strokeDashoffset="0"
                                strokeLinecap="round"
                            />

                            {/* Carbs */}
                            <circle
                                cx="50"
                                cy="50"
                                r="45"
                                stroke="#0ea5e9"
                                strokeWidth="8"
                                fill="none"
                                strokeDasharray={`${carbsArc} 283`}
                                strokeDashoffset={`-${carbsOffset}`}
                                strokeLinecap="round"
                            />

                            {/* Fat */}
                            <circle
                                cx="50"
                                cy="50"
                                r="45"
                                stroke="#facc15"
                                strokeWidth="8"
                                fill="none"
                                strokeDasharray={`${fatArc} 283`}
                                strokeDashoffset={`-${fatOffset}`}
                                strokeLinecap="round"
                            />
                        </svg>
                    </div>

                    {/* Th√¥ng tin dinh d∆∞·ª°ng */}
                    <div className="text-center">
                        {/* T·ªïng calo ·ªü tr√™n */}
                        <div className="mb-1 d-flex align-items-center gap-2">
                            <div className="fw-semibold fs-5">{targetCalo}</div>
                            <small className="text-white">CALO</small>
                        </div>

                        {/* 3 ch·∫•t dinh d∆∞·ª°ng ·ªü d∆∞·ªõi */}
                        <div className="d-flex flex-column flex-md-row justify-content-center align-items-center gap-3">
                            <div className="d-flex align-items-center gap-2">
                                <span className="d-inline-block rounded-circle bg-danger" style={{ width: 10, height: 10 }}></span>
                                <span>Ch·∫•t ƒë·∫°m: {targetProtein}g</span>
                            </div>
                            <div className="d-flex align-items-center gap-2">
                                <span className="d-inline-block rounded-circle bg-info" style={{ width: 10, height: 10 }}></span>
                                <span>ƒê∆∞·ªùng b·ªôt: {targetCarbs}g</span>
                            </div>
                            <div className="d-flex align-items-center gap-2">
                                <span className="d-inline-block rounded-circle bg-warning" style={{ width: 10, height: 10 }}></span>
                                <span>Ch·∫•t b√©o: {targetFat}g</span>
                            </div>
                        </div>
                    </div>
                </div>

                {/* Buttons: Ch·ªânh s·ª≠a v√† √Åp d·ª•ng */}
                <div className="d-flex flex-column flex-md-row justify-content-center align-items-center gap-3 mt-3 ms-5">
                    <button type="button" className="btn btn-outline-info d-flex align-items-center gap-2 px-3">
                        Ch·ªânh s·ª≠a
                    </button>

                    <button type="button" className="btn btn-info text-white d-flex align-items-center gap-2 px-3">
                        √Åp d·ª•ng
                    </button>
                </div>
            </div>

            {renderMeal('s√°ng')}
            {renderMeal('tr∆∞a')}
            {renderMeal('t·ªëi')}
            {renderMeal('ƒÉn v·∫∑t')}
        </div>
    );
}
