import React, { useEffect, useRef, useState } from "react";
import * as echarts from "echarts";
import { Info, LineChart, Heart, User, Calendar, Clock, Activity, CheckCircle, AlertTriangle } from "lucide-react";
import axios from "axios";
import { useSelector, useDispatch } from "react-redux";

const following = (userData) => {
  const latestReading = 7.2;

  const readingStatus = {
    status: latestReading < 6 ? 'normal' : latestReading < 7 ? 'prediabetes' : 'danger',
    color: latestReading < 6 ? 'text-success' : latestReading < 7 ? 'text-warning' : 'text-danger',
    bg: latestReading < 6 ? 'bg-success bg-opacity-10' : latestReading < 7 ? 'bg-warning bg-opacity-10' : 'bg-danger bg-opacity-10',
    border: latestReading < 6 ? 'border-success' : latestReading < 7 ? 'border-warning' : 'border-danger'
  };

  return <div className="container py-3">
    {/* Header */}
    <div className="bg-white rounded shadow-sm border p-3 mb-3">
      <div className="d-flex justify-content-between align-items-center">
        <div>
          <h2 className="fw-bold text-dark mb-1 fs-4">Theo d√µi s·ª©c kh·ªèe</h2>
          <p className="text-muted">Qu·∫£n l√Ω ch·ªâ s·ªë ƒë∆∞·ªùng huy·∫øt c·ªßa b·∫°n</p>
        </div>
        <div className="d-flex align-items-center gap-2">
          <div className="text-end">
            <div className="text-muted small">L·∫ßn ƒëo g·∫ßn nh·∫•t</div>
            <div className={`fw-semibold fs-6 ${readingStatus.color}`}>{latestReading} mmol/L</div>
          </div>
          <div className={`p-2 rounded-circle border ${readingStatus.bg} ${readingStatus.border}`}>
            <Heart size={20} className={readingStatus.color} />
          </div>
        </div>
      </div>
    </div>

    <div className="row g-2 align-items-stretch">
      {/* User Info */}
      <div className="col-lg-4">
        <div className="bg-white rounded shadow-sm border p-4 h-100">
          <div className="d-flex align-items-center gap-2 mb-3">
            <div className="bg-primary bg-opacity-10 p-2 rounded">
              <User size={18} className="text-primary" />
            </div>
            <h5 className="fw-semibold mb-0">Th√¥ng tin c√° nh√¢n</h5>
          </div>
          <ul className="list-unstyled small mb-0">
            <li className="d-flex justify-content-between mb-2"><span className="text-muted">H·ªç t√™n:</span><span>{userData.name}</span></li>
            <li className="d-flex justify-content-between mb-2"><span className="text-muted">Tu·ªïi:</span><span>{userData.age}</span></li>
            <li className="d-flex justify-content-between mb-2"><span className="text-muted">Gi·ªõi t√≠nh:</span><span>{userData.gender}</span></li>
            <li className="d-flex justify-content-between mb-2"><span className="text-muted">T√¨nh tr·∫°ng:</span><span className="text-danger">{userData.condition}</span></li>
            <li className="d-flex justify-content-between"><span className="text-muted">B√°c sƒ©:</span><span>{userData.doctor}</span></li>
          </ul>
        </div>
      </div>

      {/* Appointment */}
      <div className="col-lg-4">
        <div className="bg-white rounded shadow-sm border p-4 text-center h-100">
          <div className="d-flex align-items-center gap-2 mb-3">
            <div className="bg-success bg-opacity-10 p-2 rounded">
              <Calendar size={18} className="text-success" />
            </div>
            <h5 className="fw-semibold mb-0">L·ªãch h·∫πn ti·∫øp theo</h5>
          </div>
          <div className="fs-4 fw-bold text-dark mb-1">
            {new Date(userData.nextAppointment).toLocaleDateString('vi-VN')}
          </div>
          <div className="text-muted mb-3">
            {new Date(userData.nextAppointment).toLocaleDateString('vi-VN', {
              weekday: 'long', year: 'numeric', month: 'long', day: 'numeric'
            })}
          </div>
          <div className="d-flex justify-content-center align-items-center gap-1 text-muted small">
            <Clock size={14} className="text-danger" /> <span className="text-danger">Nh·ªõ chu·∫©n b·ªã tr∆∞·ªõc 30 ph√∫t</span>
          </div>
        </div>
      </div>

      {/* Status */}
      <div className="col-lg-4">
        <div className="bg-white rounded shadow-sm border p-4 h-100">
          <div className="d-flex align-items-center gap-2 mb-3">
            <div className="bg-purple bg-opacity-10 p-2 rounded">
              <Activity size={18} className="text-purple" />
            </div>
            <h5 className="fw-semibold mb-0">T√¨nh tr·∫°ng hi·ªán t·∫°i</h5>
          </div>

          <div className={`p-3 rounded ${readingStatus.bg} ${readingStatus.border} border`}>
            <div className="d-flex align-items-center gap-2 mb-2">
              {readingStatus.status === 'normal' ? (
                <CheckCircle size={18} className="text-success" />
              ) : (
                <AlertTriangle size={18} className="text-warning" />
              )}
              <strong className={readingStatus.color}>
                {readingStatus.status === 'normal' ? 'B√¨nh th∆∞·ªùng' : readingStatus.status === 'prediabetes' ? 'Ti·ªÅn ti·ªÉu ƒë∆∞·ªùng' : 'C·∫ßn ch√∫ √Ω'}
              </strong>
            </div>
            <div className="small text-muted">
              {readingStatus.status === 'normal' ? 'Ch·ªâ s·ªë ƒë∆∞·ªùng huy·∫øt trong m·ª©c b√¨nh th∆∞·ªùng' :
                readingStatus.status === 'prediabetes' ? 'Ch·ªâ s·ªë cao h∆°n b√¨nh th∆∞·ªùng, c·∫ßn theo d√µi' :
                  'Ch·ªâ s·ªë cao, c·∫ßn tham kh·∫£o √Ω ki·∫øn b√°c sƒ©'}
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
}

const char = () => {
  return <div className="bg-white rounded shadow-sm border p-4 mb-4">
    <div className="d-flex align-items-center gap-2 mb-3">
      <div className="p-2 rounded bg-indigo bg-opacity-10 d-inline-flex align-items-center justify-content-center">
        <LineChart size={20} className="text-indigo" />
      </div>
      <h5 className="mb-0 fw-semibold text-dark">Bi·ªÉu ƒë·ªì theo d√µi</h5>
    </div>
    <div id="health-chart" className="w-100" style={{ height: "16rem" }}></div>
  </div>
}

const Plan = (aiPlan) => {
  let user = useSelector((state) => state.auth.userInfo);

  const applyMedicine = async (medicinePlan) => {
    let data = {
      email: user.email,
      medicinePlan: medicinePlan,
    }

    try {
      const res = await axios.post(
        "http://localhost:5678/webhook-test/apply-medicine", // Thay b·∫±ng webhook th·ª±c t·∫ø c·ªßa b·∫°n
        {
          message: {
            text: data,
          }
        },
      );

      const botResponse = res.data.myField;


      console.log("Bot response AI:", botResponse);
    } catch (err) {
      console.error(err);
    }
  }

  return (
    <>
      {/* K·∫æ HO·∫†CH THU·ªêC */}
      <div className="bg-light border rounded p-3 mt-3">
        <h5 className="fw-semibold mb-2">üìã K·∫ø ho·∫°ch d√πng thu·ªëc</h5>
        <ul className="list-unstyled small mb-3">
          <li><strong>S√°ng:</strong> {aiPlan.thuoc.sang || "Kh√¥ng d√πng"}</li>
          <li><strong>Tr∆∞a:</strong> {aiPlan.thuoc.trua || "Kh√¥ng d√πng"}</li>
          <li><strong>T·ªëi:</strong> {aiPlan.thuoc.toi || "Kh√¥ng d√πng"}</li>
        </ul>
        <div className="d-flex justify-content-end">
          <button className="btn btn-sm btn-success" onClick={() => applyMedicine(aiPlan.thuoc)}>
            √Åp d·ª•ng thu·ªëc
          </button>
        </div>
      </div>

      {/* K·∫æ HO·∫†CH DINH D∆Ø·ª†NG */}
      <div className="bg-light border rounded p-3 mt-3">
        <h5 className="fw-semibold mb-2">ü•ó K·∫ø ho·∫°ch dinh d∆∞·ª°ng</h5>
        <div className="mb-2"><strong>Calo/ng√†y:</strong> {aiPlan.cheDoAn.caloNgay}</div>
        <ul className="list-unstyled mt-2 small">
          <li><strong>S√°ng:</strong> {aiPlan.cheDoAn.buaAn.sang.mon} ({aiPlan.cheDoAn.buaAn.sang.kcal} Kcal)</li>
          <li><strong>Tr∆∞a:</strong> {aiPlan.cheDoAn.buaAn.trua.mon} ({aiPlan.cheDoAn.buaAn.trua.kcal} Kcal)</li>
          <li><strong>T·ªëi:</strong> {aiPlan.cheDoAn.buaAn.toi.mon} ({aiPlan.cheDoAn.buaAn.toi.kcal} Kcal)</li>
          <li><strong>Ph·ª•:</strong> {aiPlan.cheDoAn.buaAn.phu.mon} ({aiPlan.cheDoAn.buaAn.phu.kcal} Kcal)</li>
        </ul>
        <div className="d-flex justify-content-end">
          <button className="btn btn-sm btn-success" onClick={() => alert("ƒê√£ √°p d·ª•ng ch·∫ø ƒë·ªô ƒÉn!")}>
            √Åp d·ª•ng ch·∫ø ƒë·ªô ƒÉn
          </button>
        </div>
      </div>

    </>
  )
}

const HealthTabs = () => {
  const [messageInput, setMessageInput] = useState([]);
  const [aiPlan, setAiPlan] = useState(null);

  const [userData, setUserData] = useState({
    name: "Nguy·ªÖn VƒÉn A",
    age: 45,
    gender: "Nam",
    condition: "Ti·ªÉu ƒë∆∞·ªùng type 2",
    doctor: "B√°c sƒ© Tr·∫ßn Th·ªã B",
    nextAppointment: "2025-06-30",
    bloodSugar: [5.6, 6.2, 5.8, 6.5, 6.0, 5.9, 6.3],
  });

  useEffect(() => {
    const chartDom = document.getElementById("health-chart");
    if (chartDom) {
      const myChart = echarts.init(chartDom);
      const dates = [
        "17/06",
        "18/06",
        "19/06",
        "20/06",
        "21/06",
        "22/06",
        "23/06",
      ];

      const option = {
        title: {
          text: "Ch·ªâ s·ªë ƒë∆∞·ªùng huy·∫øt (mmol/L)",
          left: "center",
          textStyle: {
            fontSize: 14,
          },
        },
        tooltip: {
          trigger: "axis",
        },
        xAxis: {
          type: "category",
          data: dates,
        },
        yAxis: {
          type: "value",
          min: 4,
          max: 8,
          axisLabel: {
            formatter: "{value} mmol/L",
          },
        },
        series: [
          {
            data: userData.bloodSugar,
            type: "line",
            smooth: true,
            lineStyle: {
              color: "#4f46e5",
            },
            itemStyle: {
              color: "#4f46e5",
            },
            markLine: {
              data: [
                {
                  yAxis: 5.6,
                  lineStyle: { color: "#10b981" },
                  label: { formatter: "M·ª©c b√¨nh th∆∞·ªùng" },
                },
                {
                  yAxis: 7.0,
                  lineStyle: { color: "#ef4444" },
                  label: { formatter: "Ng∆∞·ª°ng cao" },
                },
              ],
            },
          },
        ],
        grid: {
          left: "10%",
          right: "10%",
          bottom: "15%",
        },
      };

      myChart.setOption(option);

      return () => {
        myChart.dispose();
      };
    }
  }, [userData.bloodSugar]);

  const extractInfo = (text) => {
    const getValue = (regex, src = text) => {
      const match = src.match(regex);
      return match ? match[1].trim() : "";
    };

    const getNumber = (regex, src = text) => {
      const val = getValue(regex, src);
      return val ? parseInt(val, 10) : 0;
    };

    // --- 1. THU·ªêC (t√°ch t·ª´ng b·ªØa t·ª´ 1 d√≤ng) ---
    const thuocRaw = getValue(/- Thu·ªëc \(T√™n & Li·ªÅu\):\s*(.+?)\n/i);
    const thuocMap = { s√°ng: "", tr∆∞a: "", t·ªëi: "" };

    if (thuocRaw) {
      const sangMatch = thuocRaw.match(/S√°ng:\s*(.*?)(?=Tr∆∞a:|T·ªëi:|$)/i);
      const truaMatch = thuocRaw.match(/Tr∆∞a:\s*(.*?)(?=T·ªëi:|$)/i);
      const toiMatch = thuocRaw.match(/T·ªëi:\s*(.*)/i);

      if (sangMatch) thuocMap["s√°ng"] = sangMatch[1].trim();
      if (truaMatch) thuocMap["tr∆∞a"] = truaMatch[1].trim();
      if (toiMatch) thuocMap["t·ªëi"] = toiMatch[1].trim();
    }

    // --- 2. CALO ---
    const caloNgay = getNumber(/Calo\/ng√†y:\s*(\d+)/i);
    const kcalSang = getNumber(/S√°ng\s*\(Kcal\):\s*(\d+)/i);
    const kcalTrua = getNumber(/Tr∆∞a\s*\(Kcal\):\s*(\d+)/i);
    const kcalToi = getNumber(/T·ªëi\s*\(Kcal\):\s*(\d+)/i);
    const kcalPhu = getNumber(/M√≥n ph·ª•\s*\(Kcal\):\s*(\d+)/i);

    // --- 3. M√ìN ƒÇN (t√°ch t·ª´ chu·ªói d√†i) ---
    const monRaw = getValue(/- M√≥n ƒÉn c·ª• th·ªÉ:\s*(.*)/i);
    const monAnMap = { s√°ng: "", tr∆∞a: "", t·ªëi: "", phu: "" };

    if (monRaw) {
      const monSang = monRaw.match(/S√°ng:\s*(.*?)(?=Tr∆∞a:|T·ªëi:|Ph·ª•:|$)/i);
      const monTrua = monRaw.match(/Tr∆∞a:\s*(.*?)(?=T·ªëi:|Ph·ª•:|$)/i);
      const monToi = monRaw.match(/T·ªëi:\s*(.*?)(?=Ph·ª•:|$)/i);
      const monPhu = monRaw.match(/Ph·ª•:\s*(.*)/i);

      if (monSang) monAnMap["s√°ng"] = monSang[1].trim();
      if (monTrua) monAnMap["tr∆∞a"] = monTrua[1].trim();
      if (monToi) monAnMap["t·ªëi"] = monToi[1].trim();
      if (monPhu) monAnMap["phu"] = monPhu[1].trim();
    }

    return {
      thuoc: {
        sang: thuocMap["s√°ng"],
        trua: thuocMap["tr∆∞a"],
        toi: thuocMap["t·ªëi"]
      },
      cheDoAn: {
        caloNgay,
        buaAn: {
          sang: { kcal: kcalSang, mon: monAnMap["s√°ng"] },
          trua: { kcal: kcalTrua, mon: monAnMap["tr∆∞a"] },
          toi: { kcal: kcalToi, mon: monAnMap["t·ªëi"] },
          phu: { kcal: kcalPhu, mon: monAnMap["phu"] }
        }
      }
    };
  };

  const handleAiAgent = async () => {
    if (messageInput.trim() === "") return;

    // x·ª≠ l√Ω d·ªØ li·ªáu
    let result = '';

    if (messageInput < 3.9) {
      result = '<3.9 (H·∫° ƒë∆∞·ªùng huy·∫øt)';
    } else if (messageInput >= 3.9 && messageInput <= 5.6) {
      result = '3.9 ‚Äì 5.6 (B√¨nh th∆∞·ªùng)';
    } else if (messageInput > 5.6 && messageInput <= 7.8) {
      result = '5.7 ‚Äì 7.8 (Ti·ªÅn ti·ªÉu ƒë∆∞·ªùng)';
    } else if (messageInput > 7.8 && messageInput <= 10) {
      result = '7.8 ‚Äì 10 (Ti·ªÉu ƒë∆∞·ªùng)';
    } else if (messageInput > 10 && messageInput <= 13.9) {
      result = '10 ‚Äì 13.9 (Ti·ªÉu ƒë∆∞·ªùng cao)';
    } else if (messageInput > 13.9) {
      result = '>13.9 (Nguy hi·ªÉm)';
    } else {
      result = 'Gi√° tr·ªã kh√¥ng h·ª£p l·ªá';
    }

    setMessageInput("");

    try {
      const res = await axios.post(
        "http://localhost:5678/webhook-test/mess-fb-new", // Thay b·∫±ng webhook th·ª±c t·∫ø c·ªßa b·∫°n
        {
          message: {
           input: messageInput, 
           type: result
          }
        },
      );

      const botResponse = res.data.myField;

      let parsedResult = extractInfo(botResponse);
      setAiPlan(parsedResult);

      console.log("Bot response AI:", parsedResult);
    } catch (err) {
      console.error(err);
    }
  }

  return (
    <div className="d-flex flex-column gap-4">
      {/* ti√™u ƒë·ªÅ */}
      {following(userData)}

      {/* Bi·ªÉu ƒë·ªì */}
      {char()}

      <div className="d-flex flex-column flex-lg-row gap-4">
        {/* Nh·∫≠p ch·ªâ s·ªë m·ªõi */}
        <div className="bg-white rounded shadow-lg p-4 flex-fill">
          <h3 className="fw-semibold mb-3 fs-6">Nh·∫≠p ch·ªâ s·ªë m·ªõi</h3>
          <div className="d-flex flex-column flex-sm-row gap-2">
            <input
              type="text"
              className="form-control form-control-sm"
              placeholder="Nh·∫≠p ch·ªâ s·ªë ƒë∆∞·ªùng huy·∫øt"
              value={messageInput}
              onChange={(e) => setMessageInput(e.target.value)}
              onKeyDown={(e) => e.key === "Enter" && handleAiAgent()}
            />
            <button className="btn btn-sm btn-primary fw-medium"
              onClick={() => handleAiAgent()}
            >L∆∞u</button>
          </div>
          <div className="mt-3 text-secondary small d-flex align-items-center">
            <Info size={14} className="me-1" />
            Nh·∫≠p ch·ªâ s·ªë ƒë∆∞·ªùng huy·∫øt theo ƒë∆°n v·ªã mmol/L
          </div>
          {aiPlan && Plan(aiPlan)}
        </div>

        {/* Th√¥ng tin th√™m */}
        <div className="bg-white rounded shadow-sm p-4 flex-fill">
          <h3 className="fw-semibold mb-3 fs-6">Th√¥ng tin th√™m</h3>
          <div className="d-flex flex-column gap-3 small">
            <div className="bg-success bg-opacity-10 p-3 rounded">
              <div className="fw-medium text-success mb-1">Ch·ªâ s·ªë b√¨nh th∆∞·ªùng</div>
              <p className="text-success mb-1">ƒê∆∞·ªùng huy·∫øt l√∫c ƒë√≥i: 3.9 - 5.5 mmol/L</p>
              <p className="text-success">ƒê∆∞·ªùng huy·∫øt sau ƒÉn 2h: &lt; 7.8 mmol/L</p>
            </div>

            <div className="bg-warning bg-opacity-10 p-3 rounded">
              <div className="fw-medium text-warning mb-1">Ch·ªâ s·ªë ti·ªÅn ti·ªÉu ƒë∆∞·ªùng</div>
              <p className="text-warning mb-1">ƒê∆∞·ªùng huy·∫øt l√∫c ƒë√≥i: 5.6 - 6.9 mmol/L</p>
              <p className="text-warning">ƒê∆∞·ªùng huy·∫øt sau ƒÉn 2h: 7.8 - 11.0 mmol/L</p>
            </div>

            <div className="bg-danger bg-opacity-10 p-3 rounded">
              <div className="fw-medium text-danger mb-1">Ch·ªâ s·ªë ti·ªÉu ƒë∆∞·ªùng</div>
              <p className="text-danger mb-1">ƒê∆∞·ªùng huy·∫øt l√∫c ƒë√≥i: ‚â• 7.0 mmol/L</p>
              <p className="text-danger">ƒê∆∞·ªùng huy·∫øt sau ƒÉn 2h: ‚â• 11.1 mmol/L</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default HealthTabs;
